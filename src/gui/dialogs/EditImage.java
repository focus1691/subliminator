package gui.dialogs;import java.awt.Color;import java.awt.Graphics2D;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Image;import java.awt.Insets;import java.awt.RenderingHints;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.image.BufferedImage;import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.nio.file.FileAlreadyExistsException;import java.nio.file.Files;import java.util.prefs.Preferences;import javax.imageio.ImageIO;import javax.swing.BorderFactory;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFileChooser;import javax.swing.JInternalFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.WindowConstants;import constants.MessageTense;import controller.MessageController;import gui.component.JRoundRectButton;import gui.message.MessagePanel;import gui.util.IconFetch;import model.Message;import utility.FontPicker;@SuppressWarnings("serial")public class EditImage extends JInternalFrame {	public static final int W = 400, H = 450;	private Preferences prefs;	private MessageController controller;	private JLabel errorMsg;	private JLabel displayImg;	private JButton deleteBtn, browseBtn, okBtn;	private String oldImgPath, selectedImgPath, selectedImageName;	private Message message;	private int messageIndex;	private MessagePanel messagePanel;	public EditImage(MessageController controller, Message message, MessagePanel messagePanel, int messageIndex) {		super("Edit Image", false, true, false, false);		this.controller = controller;		this.message = message;		this.messagePanel = messagePanel;		this.oldImgPath = this.selectedImgPath = message.getImagePath();		this.messageIndex = messageIndex;		initComponents();		setupUI();		setTitle("Edit image of: " + message.getMessage());		getContentPane().setBackground(Color.decode("#1975bf"));		setSize(W, H);		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);	}	public void initComponents() {		prefs = Preferences.userRoot().node(getClass().getName());		displayImg = new JLabel();		displayImg.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0),				BorderFactory.createEtchedBorder()));		if (!oldImgPath.isEmpty()) {			Image image = null;			if (IconFetch.getInstance().getIcon(oldImgPath) != null) {				image = getScaledImage(IconFetch.getInstance().getIcon(oldImgPath).getImage(), 250, 275);			} else {				image = getScaledImage(new ImageIcon(oldImgPath).getImage(), 250, 275);			}			System.out.println(message.getImagePath());			displayImg.setIcon(new ImageIcon(image));		}		errorMsg = new JLabel("Error message");		errorMsg.setFont(FontPicker.getFont(FontPicker.latoBlack, 19.18f));		errorMsg.setForeground(Color.ORANGE);		errorMsg.setVisible(false);		browseBtn = new JRoundRectButton("Browse");		browseBtn.setFont(FontPicker.getFont(FontPicker.latoRegular, 16.71f));		browseBtn.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				JFileChooser chooser = new JFileChooser(prefs.get("LAST_USED_FOLDER", new File(".").getAbsolutePath()));				int result = chooser.showOpenDialog(EditImage.this);				if (result == JFileChooser.APPROVE_OPTION) {					prefs.put("LAST_USED_FOLDER", chooser.getSelectedFile().getParent());					selectedImgPath = chooser.getSelectedFile().getAbsolutePath();					selectedImageName = chooser.getSelectedFile().getName();					try {						ImageIcon icon = new ImageIcon(ImageIO.read(chooser.getSelectedFile()));						Image dimg = icon.getImage().getScaledInstance(displayImg.getWidth(), displayImg.getHeight(),								Image.SCALE_SMOOTH);						displayImg.setIcon(new ImageIcon(dimg));						errorMsg.setVisible(false);					} catch (IOException e2) {						errorMsg.setText("Unable to load image");						errorMsg.setVisible(true);					} catch (NullPointerException e2) {						errorMsg.setText("Unable to load image");						errorMsg.setVisible(true);					}				}			}		});		deleteBtn = new JRoundRectButton("Delete");		deleteBtn.setFont(FontPicker.getFont(FontPicker.latoRegular, 16.71f));		deleteBtn.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent e) {				if (IconFetch.getInstance().getIcon(selectedImgPath) == null) {					errorMsg.setText("No image to delete");					errorMsg.setVisible(true);				} else {					message.setPath("");					selectedImgPath = "";					displayImg.setIcon(new ImageIcon(getScaledImage(new ImageIcon("").getImage(), 250, 275)));					errorMsg.setText("Image deleted");					errorMsg.setVisible(true);				}			}		});		okBtn = new JRoundRectButton("OK");		okBtn.setFont(FontPicker.getFont(FontPicker.latoRegular, 16.71f));		okBtn.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent ae) {				try {					Files.copy(new File(selectedImgPath).toPath(),							new File((System.getProperty("user.dir") + "/target/classes/images/" + selectedImageName))									.toPath());					String new_image = "/images/" + selectedImageName;					message.setPath(new_image);					controller.getMessagesFromCategory(controller.getCategoryIndex(), MessageTense.FIRST_PERSON)							.get(messageIndex).setPath(new_image);					messagePanel.removeMessages();					messagePanel.setMessageList(controller.getMessagesFromActiveTenseCategory());					controller.save();					dispose();				} catch (FileNotFoundException e) {					errorMsg.setText("Image not found");					errorMsg.setVisible(true);				} catch (FileAlreadyExistsException e) {					errorMsg.setText("You already have this image");					errorMsg.setVisible(true);				} catch (IOException e) {					errorMsg.setText("Unable to read the file");					errorMsg.setVisible(true);				}			}		});	}	private Image getScaledImage(Image srcImg, int w, int h) {		BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);		Graphics2D g2 = resizedImg.createGraphics();		g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);		g2.drawImage(srcImg, 0, 0, 250, 275, null);		g2.dispose();		return resizedImg;	}	public void setupUI() {		setBackground(Color.decode("#1975bf"));		GridBagLayout gbl = new GridBagLayout();		GridBagConstraints gc = new GridBagConstraints();		setLayout(gbl);		gc.gridx = 0;		gc.gridy = 0;		gc.gridwidth = 3;		gc.fill = GridBagConstraints.HORIZONTAL;		gc.anchor = GridBagConstraints.NORTH;		gc.insets = new Insets(0, 0, 0, 0);		add(errorMsg, gc);		gc.gridx = 0;		gc.gridy++;		gc.gridheight = 1;		gc.gridwidth = 3;		gc.weightx = 1;		gc.weighty = 1;		gc.fill = GridBagConstraints.BOTH;		gc.anchor = GridBagConstraints.CENTER;		add(displayImg, gc);		gc.gridx = 0;		gc.gridy++;		gc.gridheight = 1;		gc.gridwidth = 1;		gc.weightx = 1;		gc.weighty = 1;		gc.insets = new Insets(0, 0, 0, 0);		gc.anchor = GridBagConstraints.CENTER;		gc.fill = GridBagConstraints.NONE;		add(browseBtn, gc);		gc.gridx++;		add(okBtn, gc);		gc.gridx++;		add(deleteBtn, gc);	}}